/*
 * 存放组件
 *
 这一层位于中间，提供组件极的CSS类。提到组件，就让人想起模块化，”模块化”可以从样式和行为两个层面来考虑，与common层相关的样式的模块化。我们可以讲页面内的元素拆分成一小块一小块功能和样式相对独立的“模块”，这些“模块”有些是很少重复的，有些会大量重复，我们可以将大量重复的“模块”视为一个组件，我们从页面里尽可能提取出来，放在common层里，common层就相当于MVC模式中M(Model,模型)。
 * */


html{font-size:10px}
@media screen and (min-width:321px) and (max-width:375px){html{font-size:11px}}
@media screen and (min-width:376px) and (max-width:414px){html{font-size:12px}}
@media screen and (min-width:415px) and (max-width:639px){html{font-size:15px}}
@media screen and (min-width:640px) and (max-width:719px){html{font-size:20px}}
@media screen and (min-width:720px) and (max-width:749px){html{font-size:22.5px}}
@media screen and (min-width:750px) and (max-width:799px){html{font-size:23.5px}}
@media screen and (min-width:800px){html{font-size:25px}}






/*
 * 命名规则
 *
 * CSS的命名推荐使用英语，不要使用汉语拼音。
 * 头部用head,底部用foot，主体用main，导航用nav，菜单用menu，
 *
 * */


/*head 頭部*/



/*水平垂直居中*/
display: -webkit-box;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
	-webkit-box-pack: center;
	-ms-flex-pack: center;
	-webkit-justify-content: center;
	justify-content: center;
	-webkit-box-align: center;
	-ms-flex-align: center;
	-webkit-align-items: center;
	align-items: center;

/*transform 里面的rotate与perspective连用， perspective表示视距*/
	-webkit-transform: perspective(400px) rotateY(40deg);


/*指定子元素定位在三维空间内*/
transform-style: preserve-3d




/*底部用foot*/

/*关于flex属性 -----旧*/
display:isplay:-webkit-box;display:-moz-box;display:-ms-box;
	旧属性

box-orient：horizontal | vertical | inline-axis | block-axis
	horizontal：
	设置伸缩盒对象的子元素从左到右水平排列
	vertical：
	设置伸缩盒对象的子元素从上到下纵向排列
	inline-axis：
	设置伸缩盒对象的子元素沿行轴排列
	block-axis：
	设置伸缩盒对象的子元素沿块轴排列

box-pack：start | center | end | justify      ---垂直方向上
	start：
	设置伸缩盒对象的子元素从开始位置对齐（大部分情况等同于左对齐，受）
	center：
	设置伸缩盒对象的子元素居中对齐
	end：
	设置伸缩盒对象的子元素从结束位置对齐（大部分情况等同于右对齐）
	justify：
	设置或伸缩盒对象的子元素两端对齐

box-align：start | end | center | baseline | stretch --水平方向
	start：
	设置伸缩盒对象的子元素从开始位置对齐
	center：
	设置伸缩盒对象的子元素居中对齐
	end：
	设置伸缩盒对象的子元素从结束位置对齐
	baseline：
	设置伸缩盒对象的子元素基线对齐
	stretch：
	设置伸缩盒对象的子元素自适应父元素尺寸

box-flex
	使用浮点数指定对象所分配其父元素剩余空间的比例。


box-ordinal-group
	用整数值来定义伸缩盒对象的子元素显示顺序。


box-direction：normal | reverse
	normal：
	设置伸缩盒对象的子元素按正常顺序排列
	reverse：
	反转伸缩盒对象的子元素的排列顺序

box-lines：single | multiple
	single：
	伸缩盒对象的子元素只在一行内显示
	multiple：
	伸缩盒对象的子元素超出父元素的空间时换行显示







/**flex 属性 ----新--*/
flex：定义布局为盒模型
flex-v：盒模型垂直布局
flex-1：子元素占据剩余的空间
flex-align-center：子元素垂直居中
flex-pack-center：子元素水平居中
flex-pack-justify：子元素两端对齐
兼容性：ios 4+、android 2.3+、winphone8+
============================================================ */
.flex{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}
.flex-v{-webkit-box-orient:vertical;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}
.flex-1{-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1;}
.flex-align-center{-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;}
.flex-pack-center{-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}
.flex-pack-justify{-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}

/* Let's get this party started 滚动条*/
::-webkit-scrollbar {
    width: 12px;
}

/* Track */
::-webkit-scrollbar-track {
    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);
    -webkit-border-radius: 10px;
    border-radius: 10px;
}

/* Handle */
::-webkit-scrollbar-thumb {
    -webkit-border-radius: 10px;
    border-radius: 10px;
    background: rgba(255,0,0,0.8);
    -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.5);
}
::-webkit-scrollbar-thumb:window-inactive {
    background: rgba(255,0,0,0.4);
}
